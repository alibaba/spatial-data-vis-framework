// $REMOVE_START$
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

/**
 * @note @warn DO NOT EDIT THIS FILE. IT IS TEMPLATE CODE.
 */
// $REMOVE_END$

/**
 * $LAYER_NAME$
 */
import { Mesh, UnlitMaterial } from '@gs.i/frontend-sdk'
import { buildSphere } from '@gs.i/utils-geom-builders'
import { specifyTexture } from '@gs.i/utils-specify'

import { StandardLayer, StandardLayerProps } from '@polaris.gl/gsi'

import type { PropDescription } from '../../private/schema/meta'
import {
	DescToParsedType,
	DescToType,
	DescToTypeMutable,
	parseProps,
} from '../../private/utils/props'

/**
 * 详见 @see {@link [PropDescription](../../private/schema/meta.ts)}
 *
 * Props Description. Used to:
 * - generate default props.
 * - check props type and range.
 * - generate the props editor UI.
 */
export const propsDesc = [
	// example: mutable prop
	{
		name: 'Map',
		key: 'map',
		type: 'string',
		defaultValue:
			'https://img.alicdn.com/imgextra/i1/O1CN01V6Tl3V1dzC8hdgJdi_!!6000000003806-2-tps-4096-4096.png',
	},
	// example: immutable prop
	{
		key: 'offset',
		name: '位置偏移',
		type: 'vec3',
		defaultValue: { x: 0, y: 0, z: 0 },
		mutable: true,
	},
] as const

// @note type check. will be removed when compile.
propsDesc as readonly PropDescription[]

/**
 * $LAYER_NAME$ Props
 */
type $LAYER_NAME$Props = DescToType<typeof propsDesc>
type $LAYER_NAME$MutableProps = DescToTypeMutable<typeof propsDesc>

/**
 * factory function for $LAYER_NAME$
 *
 * @description 工厂函数模式说明
 *
 * @note 函数式编程
 * - propsDesc 中的所有属性，没有指明 mutable 的，默认都为 immutable
 * - immutable 属性变化，会销毁Layer，然后用全新的 props 重新执行工厂函数
 * - 工厂函数无状态，但是可以通过闭包自行缓存一些计算
 *
 * @legacy 兼容经典的监听模式
 * - 如果希望某个属性可以运行时频繁变化
 * - - propsDesc 中将其标为 `mutable: true`
 * - - 通过 `layer.watchProps()` / `layer.watchProp()` 监听变化并响应
 */
export function create$LAYER_NAME$(props: $LAYER_NAME$Props) {
	console.log('create$LAYER_NAME$')

	// 补全缺省值，并检查必要性、类型和值范围
	const parsedProps = parseProps(props, propsDesc)

	const layer = new StandardLayer<StandardLayerProps & $LAYER_NAME$MutableProps>({
		name: '$LAYER_NAME$',
		...parsedProps,
	})

	layer.addEventListener('init', async (e) => {
		const { projection, timeline, polaris } = e

		// example: immutable props

		if (!parsedProps.map) return

		// 	几何体
		const geom = buildSphere({
			radius: 1000,
			widthSegments: 64,
			heightSegments: 64,
			normal: true,
			uv: true,
		})

		// 材质
		const matr = new UnlitMaterial({
			alphaMode: 'BLEND',
			baseColorTexture: specifyTexture({
				// 如果原图是 sRGB 空间，则需要明确指定，否则会造成色偏
				image: { uri: parsedProps.map, extensions: { EXT_image_encoding: 'SRGB' } },
			}),
		})

		// 可渲染节点
		const renderable = new Mesh({ geometry: geom, material: matr })

		// 添加到 layer 的 GSI 视图容器 中
		layer.group.add(renderable)

		// example: mutable props

		layer.useProp('offset', (e) => {
			const offset = e.props.offset
			renderable.transform.position.set(offset.x, offset.y, offset.z)
		})
	})

	return layer
}
