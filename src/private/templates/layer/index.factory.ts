// $REMOVE_START$
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-nocheck

/**
 * @note @warn DO NOT EDIT THIS FILE. IT IS TEMPLATE CODE.
 */
// $REMOVE_END$

/**
 * $LAYER_NAME$
 */
import { StandardLayer, StandardLayerProps } from '@polaris.gl/gsi'

import type { PropDescription } from '../../private/schema/meta'
import {
	DescToParsedType,
	DescToType,
	DescToTypeMutable,
	parseProps,
} from '../../private/utils/props'

/**
 * 详见 @see {@link [PropDescription](../../private/schema/meta.ts)}
 *
 * Props Description. Used to:
 * - generate default props.
 * - check props type and range.
 * - generate the props editor UI.
 *
 * @note depthTest, renderOrder 等标准属性不需要声明
 */
export const propsDesc = [
	{
		name: 'foo',
		key: 'foo',
		type: 'string',
		defaultValue: 'foo-0',
	},
	{
		name: 'bar',
		key: 'bar',
		type: 'string',
		defaultValue: 'bar-0',
		mutable: true,
	},
	// 🔨 your stuffs
] as const

/**
 * $LAYER_NAME$ Props
 */
type $LAYER_NAME$Props = DescToType<typeof propsDesc>
type $LAYER_NAME$MutableProps = DescToTypeMutable<typeof propsDesc>

/**
 * factory function for $LAYER_NAME$
 *
 * @description 工厂函数模式说明
 *
 * @note 参考 React 的函数式编程
 * - propsDesc 中的所有属性，没有指明 mutable 的，默认都为 immutable
 * - immutable 属性变化，会触发 `layer.dispose()` ，然后用全新的 props 重新执行工厂函数
 *
 * @legacy 兼容经典的监听-响应模式
 * - 如果希望某个属性可以运行时频繁变化
 * - - 将其标为 `mutable: true`
 * - - 通过 `layer.watchProps()` / `layer.watchProp()` 监听变化并响应
 */
export function create$LAYER_NAME$(props: $LAYER_NAME$Props) {
	console.log('create$LAYER_NAME$')

	// 补全缺省值，并检查必要性、类型和值范围
	const parsedProps = parseProps(props, propsDesc)

	const layer = new StandardLayer<StandardLayerProps & $LAYER_NAME$MutableProps>({
		name: '$LAYER_NAME$',
		...parsedProps,
	})

	layer.addEventListener('init', async () => {
		// immutable props

		const foo = document.createElement('div')
		layer.element.appendChild(foo)
		foo.innerHTML = `Hello from $LAYER_NAME$. 🎉 foo:${parsedProps.foo}`

		// mutable props

		const bar = document.createElement('div')
		layer.element.appendChild(bar)
		// reactions to props change
		layer.watchProps(
			['bar'],
			(event) => {
				bar.innerHTML = `Hello from $LAYER_NAME$. 🎉 bar:${event.props.bar}`
			},
			true // immediate callback with initial props
		)

		// 🔨 your stuffs
	})

	return layer
}
