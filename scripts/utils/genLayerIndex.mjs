/**
 * generate /layers/index.mjs
 */
import { existsSync } from 'fs'
import { readdir, writeFile } from 'fs/promises'
import { dirname, resolve } from 'path'
import prettier from 'prettier'
import { argv } from 'process'
import { fileURLToPath, pathToFileURL } from 'url'

const __dirname = dirname(fileURLToPath(import.meta.url))
const __root = resolve(__dirname, '../../')
const indexFile = resolve(__root, './src/layers/index.ts')

export async function genLayerIndex() {
	/**
	 * @type {string[]}
	 */
	const layerNames = await getLayerNames()

	const code = /* typescript */ `
	/**
	 * !!!! DO NOT EDIT THIS !!!!
	 * @generated
	 * - This file is generated by scripts/utils/genLayerIndex.mjs on the fly, when you build or run dev server or add/rm layers.
	 * - 该文件运行时自动生成，不要修改或提交该文件
	 */
	
	/**
	 * 将所有 Layer 类导出
	 * @note
	 * 如果全部是本地类，可以不做 tree shaking
	 * 外部和官方layer要先本地化，然后当作本地layer使用。
	 * 总之不在这里考虑 tree shaking。
	 * 所有layer的实现代码管理封装在这个文件之下，这个文件的 export 作为 interface
	 * @todo
	 * 能否用decorator集中到一起？那样就不用要求目录结构和命名
	 */
	
	// pragma: BP_GEN LAYERS_IMPORT START
	${layerNames.map((name) => `import * as ${name}Module from './${name}'`).join('\n')}
	// pragma: BP_GEN LAYERS_IMPORT END
	
	export const LayerClasses = {
		// pragma: BP_GEN LAYERS_EXPORT START
		${layerNames
			.map((name) => [
				`// pragma: ${name} START`,
				`${name}: {`,
				`factory: ${name}Module.create${name},`,
				`propsDescription: ${name}Module.propsDesc,`,
				`info: (${name}Module['info'] ?? {}) as Record<string, any>,`,
				'},',
				`// pragma: ${name} END`,
			])
			.flat()
			.join('\n')}
		// pragma: BP_GEN LAYERS_EXPORT END
	} as const
	
	// end
	`

	const formattedCode = prettier.format(code, {
		...(await prettier.resolveConfig(indexFile)),
		filepath: indexFile,
	})

	// console.log(formattedCode)
	await writeFile(indexFile, formattedCode)
}

async function getLayerNames() {
	const layerDir = resolve(__root, './src/layers')
	console.log('genLayerIndex: layerDir', layerDir)
	const files = await readdir(layerDir)

	// filter out non-folder
	let layerNames = files.filter((f) => existsSync(resolve(layerDir, f, 'index.ts')))

	// warn if name not ended as 'Layer'
	layerNames.forEach((name) => {
		if (!name.endsWith('Layer')) {
			console.warn(
				`genLayerIndex: ${name} not ended with 'Layer'. will not be considered as a layer`
			)
		}
	})

	// filter out if not ended with 'Layer'
	layerNames = layerNames.filter((f) => f.endsWith('Layer'))

	// make sure predictable order
	layerNames.sort()

	console.group('genLayerIndex: found layers')
	layerNames.forEach((n) => console.log('-', n))
	console.groupEnd('genLayerIndex: found layers')

	return layerNames
}

const isDirectCall = import.meta.url === pathToFileURL(argv[1]).href
if (isDirectCall) {
	// module was not imported but called directly
	console.log('genLayerIndex: called directly')
	genLayerIndex()
}
